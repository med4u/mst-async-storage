{"version":3,"file":"mst-async-storage.es5.js","sources":["../src/persist.ts","../src/with-async-storage.ts"],"sourcesContent":["const AsyncStorage = require(\"@react-native-community/async-storage\")\nvar CryptoJS = require(\"crypto-js\");\n\nexport async function save(key: string, snapshot: {},cryptoPassword:string) {\n  const data = JSON.stringify(snapshot)\n  await AsyncStorage.setItem(key, CryptoJS.AES.encrypt(data,cryptoPassword).toString())\n}\n\nexport async function load(key: string,cryptoPassword:string) {\n  try {\n    const raw = await AsyncStorage.getItem(key)\n    if (raw) {\n      return JSON.parse(CryptoJS.AES.decrypt(raw,cryptoPassword).toString())\n    }\n  } catch {}\n\n  return undefined\n}\n","import {\n  flow,\n  applySnapshot,\n  IStateTreeNode,\n  onSnapshot,\n  getSnapshot,\n  getType,\n} from \"mobx-state-tree\"\nimport { load, save } from \"./persist\"\n\nexport interface WithAsyncStorageOptions {\n  /**\n   * The AsyncStorage key name (default: model name).\n   */\n  key?: string\n\n  /**\n   * The Crypto-JS AES password.\n   */\n  CryptoPassword?: string\n\n  /**\n   * Should we monitor for changes via onSnapshot (default: true)?\n   */\n  autoSave?: boolean\n\n  /**\n   * A list of property names. Any other property will be ignored.\n   */\n  only?: string | string[]\n\n  /**\n   * A list of property names that will be filtered if they exist.\n   */\n  except?: string | string[]\n}\n\n/**\n * Adds AsyncStorage support to your model.\n */\nexport const withAsyncStorage = (options: WithAsyncStorageOptions = {}) => (\n  self: IStateTreeNode,\n) => {\n  let disposer: Function\n\n  // setup the default option values\n  const key = options.key || getType(self).name\n  const autoSave = typeof options.autoSave === \"boolean\" ? options.autoSave : true\n\n  const Password = options.CryptoPassword || \"DefaultPassword\"\n\n  /**\n   * Turns on AsyncStorage saving when the snapshot changes.\n   */\n  const enableSaving = () => {\n    disposer && disposer()\n    disposer = onSnapshot(self, snapshot => save(key, filterSnapshotKeys(snapshot),Password))\n  }\n\n  /**\n   * Filters out what data will make it to the persistance layer.\n   *\n   * @param snapshot The snapshot containing our data\n   */\n  function filterSnapshotKeys(snapshot: any) {\n    // sanity\n    if (!snapshot) return snapshot\n\n    // clean up inputs\n    const filterOnly = (typeof options.only === \"string\"\n      ? [options.only]\n      : options.only || []\n    ).filter(Boolean)\n\n    const filterExcept = (typeof options.except === \"string\"\n      ? [options.except]\n      : options.except || []\n    ).filter(Boolean)\n\n    // use the input if there's no filters\n    if (filterOnly.length === 0 && filterExcept.length === 0) return snapshot\n\n    let result: any = {}\n\n    if (filterOnly.length > 0) {\n      // only add certain keys\n      filterOnly.forEach(key => {\n        result[key] = snapshot[key]\n      })\n    } else if (filterExcept.length > 0) {\n      // remove certain keys\n      result = { ...snapshot }\n      filterExcept.forEach(key => {\n        delete result[key]\n      })\n    }\n    return result\n  }\n\n  return {\n    actions: {\n      /**\n       * Loads from async storage.\n       */\n      load: flow(function*() {\n        const data = yield load(key,Password)\n        if (data) {\n          applySnapshot(self, data)\n        }\n\n        // now monitor for changes\n        if (autoSave) {\n          enableSaving()\n        }\n\n        // send back the data\n        return data\n      }) as () => Promise<any | undefined>,\n\n      /**\n       * Saves the snapshot to async storage. This only needs to be\n       * called if autoSave has been turned off.\n       */\n      save: flow(function*() {\n        yield save(key, filterSnapshotKeys(getSnapshot(self)),Password)\n      }),\n\n      beforeDetach() {\n        disposer && disposer()\n      },\n    },\n  }\n}\n"],"names":[],"mappings":"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"}